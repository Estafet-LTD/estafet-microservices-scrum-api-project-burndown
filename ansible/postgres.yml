---
- name: Read the database pod list
  shell: "oc get pods --selector app=postgresql -o json"
  register: list_of_db_pods
    
- name: Get the name of the PostgreSQL Pod
  set_fact: db_pod="{{list_of_db_pods.stdout|from_json|json_query('items[0].metadata.name')}}"
  
- name: Read the DB pod services
  shell: "oc get service/postgresql -o json"
  register: list_of_db_services
      
- name: Get the cluster id address for the db
  set_fact: db_ip="{{list_of_db_services.stdout|from_json|json_query('spec.clusterIP')}}"
  
- name: Copy ddl to PostgreSQL Pod
  shell: 'oc rsync --no-perms=true --include="*.ddl" --exclude="*" {{ workdir }}/{{ repo }}/ {{db_pod}}:/tmp'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift
    - postgresql

- name: Create the microservice databases on PostgreSQL Pod
  shell: 'oc exec {{db_pod}} -- /bin/sh -i -c "createdb {{ microservice }}"'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift
    - postgresql
        
- name: Execute Drop ddl on PostgreSQL Pod
  shell: 'oc exec {{db_pod}} -- /bin/sh -i -c "psql -d {{ microservice }} -U postgres -f /tmp/{{ drop_ddl }}"'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift
    - postgresql

- name: Execute Create ddl on PostgreSQL Pod
  shell: 'oc exec {{db_pod}} -- /bin/sh -i -c "psql -d {{ microservice }} -U postgres -f /tmp/{{ create_ddl }}"'
  register: command_result
  failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
  changed_when: "'exists' not in command_result.stderr"
  tags:
    - openshift
    - postgresql